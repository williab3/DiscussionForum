@using DiscussionForum.Models
@using DiscussionForum.Custom_Helpers
@model DiscussionForum.Models.ViewModel.AnimeViewModel
@{
    ViewBag.Title = "Anime";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="col-md-2 left-sidebar">

    </div>
    <div class="col-md-8" style="margin-top:10px">
        <div class="media">
            <div class="media-left">
                <a href="#">
                    <img class="media-object" height="350" src="@Model.Anime.ImageUrlLarge" alt="...">
                </a>
            </div>
            <div class="media-body">
                <h4 class="media-heading">@Model.Anime.Title_Romaji</h4>
                <h5>@Model.Anime.Title_English</h5>
                @Html.Raw(Model.Anime.Description)
            </div>
        </div>
        <hr />
        <div class="input-group">
            <input id="freshComment" type="text" class="form-control txtBx-comment" placeholder="What do you think about it???" aria-describedby="btn-postComment">
            <span class="input-group-addon btn btn-primary" id="btn-postComment">Post Comment</span>
        </div>
        @FeedWriter.WriteComments(Model.Anime.Discussion.Comments)
        <div class="col-md-2"></div>

    </div>
</div>
@{Html.RenderAction("_LoginModalPartial", "Home"); }
<button id="btn-loginModal" type="button" hidden data-toggle="modal" data-target="#loginModal"></button>
@section Scripts{
    <script>
		var authenticated = "@Model.IsUserAuthenticated";
		$("#btn-postComment").click(function (args) {
			if (authenticated === "True") {
				var comment = {
				    animeId: @Model.Anime.Id,
				    postedComment: {
	                    what: $("#freshComment").val()
				    }
                }
			    $.ajax({
                    url: "/Anime/PostAnimeComment",
				    data: comment,
				    method:"Post",
				    success: function (data, status, xhr) {
                        console.log(data);
                        var commentId = data.Id;
                        makeComment(0, data);
	                },
				    error: function (xhr, status, err) {
		                alert(err);
	                }
                });
			$("#freshComment").val(null);
		} else {
			$("#btn-loginModal").click();
		    }
        });

        $(".txtBx-comment").keyup(function (args) {
            if (args.originalEvent.keyCode === 13) {
                console.log($(args.currentTarget).siblings("span.btn"));
                $($(args.currentTarget).siblings("span.btn")).click();
            }
        });

        $(".reply-toggle").click(function (args) {
            console.log(args);
            var commentId = $(args.target).closest("div[data-comment-id]").attr("data-comment-id");
            toggleReplyBx(commentId);
        })

        function postReply(args) {
            if (authenticated === "True") {
                var reply = {
                    RepliedCommentId: $($(args).closest("div[data-comment-id]")).attr("data-comment-id"),
                    postedComment: {
                        What: $(args.previousElementSibling).val()
                    }
                }
                console.log($(reply));
                $.ajax({
                    url: "/Anime/CommentReply",
                    method: "Post",
                    data: reply,
                    success: function (data, status, xhr) {
                        console.log(data);
                        console.log(args);
                        makeComment(reply.RepliedCommentId, data);

                    },
                });
            }
        }
        function makeComment(parentId, dataComment) {
            var commentParent;
            var postedComment;
            var header = $("<div>").addClass("comment-header").addClass("text-primary").text(dataComment.Who);
            if (parentId < 1) {
                commentParent = $("#commentsHolder");
                postedComment = $("<div>").addClass("comment");
                header = $("<div>").addClass("comment-header").addClass("text-primary").text(dataComment.Who);
            } else {
                commentParent = $("div[data-comment-id=" + parentId + "]");
                postedComment = $("<div>").addClass("reply");
                header = $("<div>").addClass("comment-header").addClass("text-primary").text(dataComment.Who);
                header.append($("<span>").addClass("glyphicon glyphicon-hand-right rightHand")).append(dataComment.RepliedTo);
                $(commentParent.find("input")).val(null);
                $(commentParent.find("span.reply-toggle")).click();
            }
            const months = ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"];
            var d1 = new Date(parseInt(dataComment.LastUpdated.substr(6)));
            postedComment.attr("data-comment-id", dataComment.Id);
            commentParent.append(postedComment);
            var bar = $("<span>").addClass("gold-bar").text("|");
            var commentDate = $("<span>").text(d1.getDate() + "-" + months[d1.getMonth()] + "-" + d1.getFullYear());
            header.append($("<span>").addClass("gold-bar").text("|"));
            header.append(commentDate);
            postedComment.append(header);
            var commentBody = $("<div>").addClass("comment-body").text(dataComment.What);
            postedComment.append(commentBody);
            var commentControls = $("<div>").addClass("comment-controls");
            postedComment.append(commentControls);
            commentControls.append($("<span>").addClass("glyphicon glyphicon-thumbs-up voteIcon"));
            commentControls.append(bar);
            commentControls.append($("<span>").addClass("glyphicon glyphicon-thumbs-down voteIcon"));
            commentControls.append($("<span>").addClass("voteIcon gold-bar reply-toggle").text("Reply").click(function (args) {
                toggleReplyBx(dataComment.Id);
            }));
            var reply = $("<div>").addClass("input-group").css("display", "none").attr("id", "reply" + dataComment.Id);
            var txtBxReply = $("<input>").addClass("form-control txtBx-comment").attr("type", "text").attr("placeholder", "What do you think about this comment?");
            var btnPostReply = $("<span>").addClass("input-group-addon btn btn-primary").text("Reply");
            reply.append(txtBxReply).append(btnPostReply);
            postedComment.append(reply);

        }

        function toggleReplyBx(cmntId) {
            $("#reply" + cmntId).toggle();
        }

        //Vote checkboxes
        $(".upVote").bendoCheckbox({
            checkedImagUrl: "/Content/Images/thumbs up-checked.png",
            uncheckedImageUrl: "/Content/Images/thumbs up-unchecked.png",
            checkAction: function (args) {
                if (authenticateUser(authenticated)) {
                    var voteStatus = {
                        up: true,
                        down: false
                    };
                    commentVoteClick(args, voteStatus);
                }
            },
            uncheckAction: function (args) {
                if (authenticateUser(authenticated)) {
                    var voteStatus = {
                        up: false,
                        down: false,
                    }
                    commentVoteClick(args, voteStatus);
                }
            }
        });

        $(".downVote").bendoCheckbox({
            checkedImagUrl: "/Content/Images/thumbs down-checked.png",
            uncheckedImageUrl: "/Content/Images/thumbs down-unchecked.png",
            checkAction: function (args) {
                if (authenticateUser(authenticated)) {
                    var voteStatus = {
                        up: false,
                        down: true
                    };
                    commentVoteClick(args, voteStatus);
                }
            },
            uncheckAction: function (args) {
                if (authenticateUser(authenticated)) {
                    voteStatus = {
                        up: false,
                        down: false
                    };
                    commentVoteClick(args, voteStatus);
                }
            },
        });

        function commentVoteClick(args, vote) {
            /*VOTE RULES:
             * 1. Only authenticated members can vote
             * 2. Members only have 1 vote per comment
             *      A. If a member tries to make the same vote trice nothing will happen.
             * 3. Members can change their vote at any time.
             *      A. If member clicks their vote it will undo that vote
             *      B. If a member clicks the opposite of a vote already made:
             *          a. it will undo the previous vote
             *          b. Make a new vote opposite of the previous vote.
             */
            var userVote = {
                VotedComment: {
                    Id: args.itemId,
                },
                CastedVote: {
                    UpVote: vote.up,
                    DownVote: vote.down
                }
            }
            $.ajax({
                url: "/Anime/Vote",
                data: userVote,
                method: "Post",
                success: function (responseData, status, xhr ) {
                    var commentId = responseData.VotedComment.Id;
                    var clickedCheckbox = $(args.checkbox);
                    if (clickedCheckbox.hasClass("upVote")) {
                        let notClickedCheckbox = $("div.downVote[data-bendo-itemId='" + commentId + "']");
                        let label = $("#upCounter" + commentId);
                        let num = Number(label.text());
                        if (clickedCheckbox.attr("data-bendo-checked") === "true") {
                            label.text(num + 1);
                            if (notClickedCheckbox.attr("data-bendo-checked") === "true") {
                                let thumbsDownData = notClickedCheckbox.data("bendoCheckbox");
                                thumbsDownData.setToUnCheck(commentId);
                                let notClickedLabel = $("#downCounter" + commentId);
                                let thumbsDownNum = Number(notClickedLabel.text());
                                if (thumbsDownNum > 0) {
                                    notClickedLabel.text(thumbsDownNum - 1);
                                }
                            }
                        } else {
                            if (num > 0) {
                                label.text(num - 1);
                            }
                        }
                    } else if (clickedCheckbox.hasClass("downVote")) {
                        let label = $("#downCounter" + commentId);
                        let num = Number(label.text());
                        if (clickedCheckbox.attr("data-bendo-checked") === "true") {
                            label.text(num + 1);
                            let notClickedcheckbox = $("div.upVote[data-bendo-itemId='" + commentId + "']");
                            if (notClickedcheckbox.attr("data-bendo-checked") === "true") {
                                let thumbsUpData = notClickedcheckbox.data("bendoCheckbox");
                                thumbsUpData.setToUnCheck(commentId);
                                let notClickedLabel = $("#upCounter" + commentId);
                                let notClickedCounter = Number(notClickedLabel.text());
                                if (notClickedCounter > 0) {
                                    notClickedLabel.text(notClickedCounter - 1);
                                }
                            }
                        } else {
                            if (num > 0) {
                                label.text(num - 1);
                            }
                        }
                    }
                    //if (responseData.CastedVote.UpVote === true) {
                    //    let thumbsUp = $("div.upVote[data-bendo-itemId='" + commentId + "']");
                    //    if (thumbsUp.attr("data-bendo-checked") === "true") {
                    //        label.text(num + 1);
                    //    } else {
                    //    }
                    //} else if (responseData.CastedVote.DownVote === true) {
                    //    let label = $("#downCounter" + commentId);
                    //    let num = Number(label.text()) + 1;
                    //    label.text(num);
                    //    console.log(label);

                    //} else if (responseData.CastedVote.UpVote === false && responseData.CastedVote.DownVote === false) {

                    //}
                },
                error: function () {

                }
            })
        }

        function authenticateUser(auth) {
            if (auth !== "True") {
                $("#btn-loginModal").click();
                return false;
            } else {
                return true;
            }
        }
    </script>
}


